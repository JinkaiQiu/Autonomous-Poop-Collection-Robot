import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Point
from geometry_msgs.msg import Twist
import time

class FollowBall(Node):

    def __init__(self):
        super().__init__('follow_ball')

        # subscribe to /detected_ball of type Point
        self.subscription = self.create_subscription(
            Point,
            'detected_ball',
            self.listener_callback,
            10)
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)
        
        timer_period = 0.1
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.lastDetectTime = time.time() - 10000;
        self.detectionTimeout = 1

    def listener_callback(self, msg):
        self.get_logger().info('Received: {} {}'.format(msg.x, msg.y))
        self.lastDetectTime = time.time()
        
    def timer_callback(self):
        msg = Twist()
        # if detection time smaller than timeout
        if (time.time() - self.lastDetectTime) < self.detectionTimeout: 
            self.get_logger().info('Detected')
        else:
            self.get_logger().info('Target lost')
        self.publisher_.publish(msg)

